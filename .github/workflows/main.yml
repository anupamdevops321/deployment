name: Ansible Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [trigger-deployment]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.24.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GGS_TOKEN }}
          
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: ssh-scp-ssh-pipelines
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
         host: ${{ secrets.SERVER_IP }}
         user: ubuntu
         key: ${{ secrets.PRIVATE_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 100.26.48.145
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |

            sed -i 's/^TAG=.*/TAG=${{ github.event.client_payload.image_tag }}/' .env
            sed -i 's/^DB_HOST=.*/DB_HOST=${{ secrets.DB_HOST }}/' .env
            sed -i 's/^DB_USER=.*/DB_USER=${{ secrets.DB_USER }}/' .env
            sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/' .env
            sed -i 's/^DB_NAME=.*/DB_NAME=${{ secrets.DB_NAME }}/' .env
            sed -i 's/^DB_PORT=.*/DB_PORT=${{ secrets.DB_PORT }}/' .env
            sed -i 's/^ALLOWED_ORIGINS=.*/ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}/' .env
            # docker stop $(docker ps -aq)
            # docker rm -f $(docker ps -aq)
            # docker rmi -f $(docker images -q)
                        
      - uses: alex-ac/github-action-ssh-docker-compose@master
        name: Docker-Compose Remote Deployment
        with:
         ssh_host: ${{ secrets.SERVER_IP }}
         ssh_private_key: ${{ secrets.PRIVATE_KEY }}
         ssh_user: ubuntu
         docker_compose_filename: /home/ubuntu/docker-compose.yml



# jobs:

#   scanning:
#     name: GitGuardian scan and Trivy
#     runs-on: ubuntu-latest
#     steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0 # fetch all history so multiple commits can be scanned
      # - name: GitGuardian scan
      #   uses: GitGuardian/ggshield-action@v1.24.0
      #   env:
      #     GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
      #     GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
      #     GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      #     GITGUARDIAN_API_KEY: ${{ secrets.GGS_TOKEN }}
    
      
#   ansible_final_deployment:
#     runs-on: ubuntu-latest

#     steps:

#     - name: Append Image Tag to .env file
#       run: |
#         echo "workflow" >> .env
        
#     - name: Checkout code
#       uses: actions/checkout@v2
        
#     - name: Install Ansible
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y ansible

#     - name: Set up SSH
#       uses: webfactory/ssh-agent@v0.7.0
#       with:
#        ssh-private-key: ${{ secrets.PRIVATE_KEY }}
#        log-public-key: false
#     - name: Set TAG variable
#       run: echo "TAG=${{ github.event.client_payload.image_tag }}" > $GITHUB_ENV

#     - name: Print TAG variable
#       run: |
#         echo "TAG is $TAG"
#         echo ${DB_HOST}
      
#     - name: Start Docker containers
#       run: |
#        export TAG="testing"
#        ansible-playbook -i inventory.ini --user ubuntu --extra-vars="ansible_ssh_common_args='-o StrictHostKeyChecking=no'" playbook-2.yml


